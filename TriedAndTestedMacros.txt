
Private Sub DeleteUselessData()
'
' DeleteUselessData Macro
'

'
    Rows("1:2").Select
    Selection.Delete Shift:=xlUp
    Columns("A:A").Select
    Selection.Delete Shift:=xlToLeft
    Columns("B:C").Select
    Selection.Delete Shift:=xlToLeft
    Range("A1").Select
End Sub

Private Sub PrepareColumnAL2()
'
' PrepareColumnAL2 Macro
'

'
    Range("A302:A601").Select
    Selection.Copy
    Range("B1").Select
    ActiveSheet.Paste
    Range("B1").Select
End Sub


Private Sub PrepareColumnAL3()
'
' PrepareColumnAL3 Macro
'

'
    Range("A603:A902").Select
    Selection.Copy
    Range("C1").Select
    ActiveSheet.Paste
    Range("C1").Select
End Sub


Private Sub DeleteTailFromFirstColumn()
'
' DeleteTailFromFirstColumn Macro
'

'
    Range("A301:A902").Select
    Selection.Delete Shift:=xlUp
End Sub

Private Sub NameEachColumns()
'
' NameEachColumns Macro
'

'
    Rows("1:1").Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Selection.Font.Bold = True
    Range("A1").Select
    ActiveCell.FormulaR1C1 = "AN1"
    Range("B1").Select
    ActiveCell.FormulaR1C1 = "AL2"
    Range("C1").Select
    ActiveCell.FormulaR1C1 = "AL3"
    Range("D1").Select
    ActiveCell.FormulaR1C1 = "AN1_ZEN"
    Range("E1").Select
    ActiveCell.FormulaR1C1 = "L21"
    Range("F1").Select
    ActiveCell.FormulaR1C1 = "L31"
    Range("G1").Select
    ActiveCell.FormulaR1C1 = "L23"
    Range("H1").Select
    ActiveCell.FormulaR1C1 = "L21_RMS"
    Range("I1").Select
    ActiveCell.FormulaR1C1 = "L23_RMS"
    Range("J1").Select
    ActiveCell.FormulaR1C1 = "L31_RMS"
    Range("K1").Select
    ActiveCell.FormulaR1C1 = "IdealRMS"
    Range("L1").Select
    ActiveCell.FormulaR1C1 = "ERROR"
End Sub


Private Sub DivideAN1byZenerGain()
'
' DivideAN1byZenerGain Macro
'

'
    Range("D2").Select
    ActiveCell.FormulaR1C1 = "=RC[-3]/33.6"
    Range("D2").Select
    Selection.AutoFill Destination:=Range("D2:D301")
    Range("D2:D301").Select
End Sub

Private Sub L21_Formula()
'
' L21_Formula Macro
'

'
    Range("E2").Select
    ActiveCell.FormulaR1C1 = "=RC[-3]-RC[-1]-2048"
    Range("E2").Select
    Selection.AutoFill Destination:=Range("E2:E301")
    Range("E2:E301").Select
End Sub

Private Sub L31_Formula()
'
' L31_Formula Macro
'

'
    Range("F2").Select
    ActiveCell.FormulaR1C1 = "=RC[-3]-RC[-2]-2048"
    Range("F2").Select
    Selection.AutoFill Destination:=Range("F2:F301")
    Range("F2:F301").Select
End Sub

Private Sub L23_Formula()
'
' L23_Formula Macro
'

'
    Range("G2").Select
    ActiveCell.FormulaR1C1 = "=RC[-2]-RC[-1]"
    Range("G2").Select
    Selection.AutoFill Destination:=Range("G2:G301")
    Range("G2:G301").Select
End Sub

Private Sub CalculateRMS_L21()
'
' CalculateRMS_L21 Macro
'

'
    Range("H2").Select
    ActiveCell.FormulaR1C1 = _
        "=DEC2HEX((INT(SQRT(SUMSQ(RC[-3]:R[299]C[-3])/COUNTA(R[-1]C[-3]:R[299]C[-3])))))"
    Range("H3").Select
End Sub

Private Sub CalculateRMS_L23()
'
' CalculateRMS_L23 Macro
'

'
    Range("I2").Select
    ActiveCell.FormulaR1C1 = _
        "=DEC2HEX((INT(SQRT(SUMSQ(RC[-2]:R[299]C[-2])/COUNTA(R[-1]C[-2]:R[299]C[-2])))))"
    Range("I3").Select
End Sub

Private Sub CalculateRMS_L31()
'
' CalculateRMS_L31 Macro
'

'
    Range("J2").Select
    ActiveCell.FormulaR1C1 = _
        "=DEC2HEX((INT(SQRT(SUMSQ(RC[-4]:R[299]C[-4])/COUNTA(R[-1]C[-4]:R[299]C[-4])))))"
    Range("J3").Select
End Sub

Private Sub CalculateErrorPercentage()
'
' CalculateErrorPercentage Macro
'

'
    Range("L2").Select
    ActiveCell.FormulaR1C1 = _
        "= (MAX(ABS(HEX2DEC(RC[-1])-HEX2DEC(RC[-4])), ABS(HEX2DEC(RC[-1])-HEX2DEC(RC[-3])), ABS(HEX2DEC(RC[-1])-HEX2DEC(RC[-2]))) / HEX2DEC(RC[-1])) * 100"
    Range("L3").Select
End Sub

Private Sub DrawChart()
'
' DrawChart Macro
'

'
    Columns("E:G").Select
    ActiveSheet.Shapes.AddChart2(227, xlLineMarkers).Select
    ActiveChart.SetSourceData Source:=Range("E1:G301")
End Sub

Private Sub ManipulateSheet()
'
' CHART Macro
'
    Call DeleteUselessData
    Call PrepareColumnAL2
    Call PrepareColumnAL3
    Call DeleteTailFromFirstColumn
    Call NameEachColumns
    Call DivideAN1byZenerGain
    Call L21_Formula
    Call L31_Formula
    Call L23_Formula
    Call CalculateRMS_L21
    Call CalculateRMS_L23
    Call CalculateRMS_L31
    Call DecideIdealRMS
    Call CalculateErrorPercentage
    Call DrawChart
'
End Sub

Private Sub CopyTextFileToSheet(fileName As String)
    Dim oFso: Set oFso = CreateObject("Scripting.FileSystemObject")
    Dim oFile: Set oFile = oFso.OpenTextFile(fileName, 1)
    Dim sText
    sText = oFile.ReadAll
    Dim obj As New DataObject
    Dim txt As String
    
    obj.SetText sText
    
    obj.PutInClipboard
    
    ActiveSheet.Paste
    oFile.Close
End Sub


Private Sub TryScriptForOneLogFile()
    
    Call CopyTextFileToSheet("C:\Users\sesa552477\Desktop\adcSamples.log")
    Call ManipulateSheet
    
End Sub

Private Sub DecideIdealRMS()

    ' Select Tools->References from the Visual Basic menu.
    ' Check box beside "Microsoft Scripting Runtime" in the list.
    Dim dict As New Scripting.Dictionary
    
    ' Add to fruit to Dictionary
    dict.Add key:="150", Item:=332
    dict.Add key:="400", Item:=892
    dict.Add key:="600", Item:=1340
    
    Range("K2").Value = Hex(dict("150"))
    Dim key As Variant
    For Each key In dict.Keys
        If InStr(ActiveSheet.Name, key) <> 0 Then
            Range("K2").Value = Hex(dict(key))
        End If
    Next key
    
    Set dict = Nothing
    
End Sub

Private Sub WriteSheetName(filePath As String)
'
' Macro3 Macro
'

'
    Range("Y1").Value = filePath
    Range("Y2").Select
    ActiveCell.FormulaR1C1 = _
        "=RIGHT(R[-1]C,LEN(R[-1]C)-FIND(""@"",SUBSTITUTE(R[-1]C,""\"",""@"",LEN(R[-1]C)-LEN(SUBSTITUTE(R[-1]C,""\"",""""))),1))"
    Range("Y3").Select
    ActiveCell.FormulaR1C1 = "=LEFT(R[-1]C,LEN(R[-1]C)-4)"
    ActiveSheet.Name = UCase(Range("Y3").Value)
    Range("Y1:Y3").Value = ""
    
End Sub

Private Sub Border()
'
' Border Macro
'

'
    Range("A1:H" & [COUNTA(A:A)]).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Range("A1:H1").Select
    Selection.Font.Size = 12
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent6
        .TintAndShade = 0.399975585192419
        .PatternTintAndShade = 0
    End With
    ActiveSheet.UsedRange.Columns.AutoFit
End Sub

Private Sub Summary()

   Dim WS_Count As Integer
   Dim I As Integer

   ' Set WS_Count equal to the number of worksheets in the active
   ' workbook.
   WS_Count = ActiveWorkbook.Worksheets.Count
    Sheets.Add
    ActiveSheet.Name = "Summary"
    Range("A1").Value = "SamplingTime(us)"
    Range("A1").Font.Bold = True
    Range("B1").Value = "SignalType"
    Range("B1").Font.Bold = True
    Range("C1").Value = "ADC_Clock"
    Range("C1").Font.Bold = True
    Range("D1").Value = "SupplyVoltage"
    Range("D1").Font.Bold = True
    Range("E1").Value = "SupplyFrequency"
    Range("E1").Font.Bold = True
    Range("F1").Value = "TestLog"
    Range("F1").Font.Bold = True
    Range("G1").Value = "Error %"
    Range("G1").Font.Bold = True
    Range("H1").Value = "Worksheet"
    Range("H1").Font.Bold = True
    
    Dim J As Integer
    J = 1
   ' Begin the loop.
   For I = WS_Count To 1 Step -1


      ' Insert your code here.
      ' The following line shows how to reference a sheet within
      ' the loop by displaying the worksheet name in a dialog box.
      
      Range("F" & (J + 1)).Value = ActiveWorkbook.Worksheets(I).Name
      Range("G" & (J + 1)).Value = Round(ActiveWorkbook.Worksheets(I).Range("L2").Value, 2)
      Range("H" & (J + 1)).Select
      ActiveSheet.Hyperlinks.Add ActiveCell, "", ActiveWorkbook.Worksheets(I).Name & "!A1", TextToDisplay:=ActiveWorkbook.Worksheets(I).Name

    J = J + 1
    
   Next I
    
    Call ColumnSamplingInterval
    Call ColumnSignalType
    Call ColumnAdcClock
    Call ColumnSupplyVoltage
    Call ColumnSupplyFrequency
    'Call RightAlign
    
    
    Columns("G:G").Select
    Selection.Font.Bold = True
    ActiveSheet.UsedRange.Columns.AutoFit
    
    Rows([COUNTA(F:F)]).Delete
End Sub

Private Sub Sort()
'
' Sort Macro
'

'
    Columns("B:B").Select
    ActiveWorkbook.Worksheets("Summary").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Summary").Sort.SortFields.Add2 key:=Range( _
        "B1"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With ActiveWorkbook.Worksheets("Summary").Sort
        .SetRange Range("A2:B" & Rows.Count)
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Private Sub ColumnSamplingInterval()

    ' Select Tools->References from the Visual Basic menu.
    ' Check box beside "Microsoft Scripting Runtime" in the list.
    Dim dict As New Scripting.Dictionary
    
    ' Add to fruit to Dictionary
    dict.Add key:="192", Item:="192"
    dict.Add key:="200", Item:="200"
    
    Dim key As Variant
    Dim I As Integer
    
    For I = 1 To ActiveSheet.UsedRange.Rows.Count
        For Each key In dict.Keys
            If Range("A" & I).Value = "" And InStr(Range("F" & I).Value, key) <> 0 Then
                Range("A" & I).Value = dict(key)
            End If
        Next key
    Next I
    Set dict = Nothing
    
End Sub

Private Sub ColumnSignalType()

    ' Select Tools->References from the Visual Basic menu.
    ' Check box beside "Microsoft Scripting Runtime" in the list.
    Dim dict As New Scripting.Dictionary
    
    ' Add to fruit to Dictionary
    dict.Add key:="SQ", Item:="SQ"
    dict.Add key:="SIN", Item:="SIN"
    dict.Add key:="DST10", Item:="DST_10"
    dict.Add key:="DST1", Item:="DST_1"
    dict.Add key:="QUASI", Item:="QUASI"
    
    Dim key As Variant
    Dim I As Integer
    
    For I = 1 To ActiveSheet.UsedRange.Rows.Count
        For Each key In dict.Keys
            If Range("B" & I).Value = "" And InStr(Range("F" & I).Value, key) <> 0 Then
                Range("B" & I).Value = dict(key)
            End If
        Next key
    Next I
    Set dict = Nothing
    
End Sub

Private Sub ColumnAdcClock()

    ' Select Tools->References from the Visual Basic menu.
    ' Check box beside "Microsoft Scripting Runtime" in the list.
    Dim dict As New Scripting.Dictionary
    
    ' Add to fruit to Dictionary
    dict.Add key:="1_5", Item:=1.5
    dict.Add key:="39_5", Item:=39.5
    dict.Add key:="160_5", Item:=160.5
    
    Dim key As Variant
    Dim I As Integer
    
    For I = 1 To ActiveSheet.UsedRange.Rows.Count
        For Each key In dict.Keys
            If Range("C" & I).Value = "" And InStr(Range("F" & I).Value, key) <> 0 Then
                Range("C" & I).Value = dict(key)
            End If
        Next key
    Next I
    Set dict = Nothing
    
End Sub
Private Sub ColumnSupplyVoltage()

    ' Select Tools->References from the Visual Basic menu.
    ' Check box beside "Microsoft Scripting Runtime" in the list.
    Dim dict As New Scripting.Dictionary
    
    ' Add to fruit to Dictionary
    dict.Add key:="150", Item:=150
    dict.Add key:="400", Item:=400
    dict.Add key:="600", Item:=600
    
    Dim key As Variant
    Dim I As Integer
    
    For I = 1 To ActiveSheet.UsedRange.Rows.Count
        For Each key In dict.Keys
            If Range("D" & I).Value = "" And InStr(Range("F" & I).Value, key) <> 0 Then
                Range("D" & I).Value = dict(key)
            End If
        Next key
    Next I
    Set dict = Nothing
    
End Sub
Private Sub ColumnSupplyFrequency()

    ' Select Tools->References from the Visual Basic menu.
    ' Check box beside "Microsoft Scripting Runtime" in the list.
    Dim dict As New Scripting.Dictionary
    
    ' Add to fruit to Dictionary
    dict.Add key:="45", Item:=45
    dict.Add key:="55", Item:=55
    dict.Add key:="65", Item:=65
    
    Dim key As Variant
    Dim I As Integer
    
    For I = 1 To ActiveSheet.UsedRange.Rows.Count
        For Each key In dict.Keys
            If Range("E" & I).Value = "" And InStr(Range("F" & I).Value, key) <> 0 Then
                Range("E" & I).Value = dict(key)
            End If
        Next key
    Next I
    Set dict = Nothing
    
End Sub

Private Sub RightAlign()
'
' Align Macro
'

'
    Range("A2:H" & [COUNTA(A:A)]).Select
    With Selection
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
End Sub

Sub GoHome()
    Sheets(1).Select
End Sub
Sub ReadEachLogFileAndPlotIt()
    Dim my_file As Integer
    Dim text_line As String
    Dim file_name As String
    Dim I As Integer
    
    'dir /s /b /a | findstr ".log" > listfiles.txt
    file_name = "C:\Users\sesa552477\Desktop\ADC_DMA_Test\data\listfiles.txt"

    my_file = FreeFile()
    Open file_name For Input As my_file

    I = 1

    While Not EOF(my_file)
        Line Input #my_file, text_line
        Sheets.Add
        Call CopyTextFileToSheet(text_line)
        Call WriteSheetName(text_line)
        Call ManipulateSheet
    Wend
    Call Summary
    Call Border
    'Call Sort
End Sub


